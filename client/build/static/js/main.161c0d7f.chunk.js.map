{"version":3,"sources":["components/Photos/local_bar-24px.svg","components/Map.js","components/Checkbox.js","components/MapContainer.js","components/SearchBar.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","mapStyles","position","width","height","CurrentLocation","props","initialCenter","lat","lng","state","currentLocation","search","prevProps","prevState","google","this","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","ReactDOM","findDOMNode","zoom","mapConfig","Object","assign","mapTypeControlOptions","mapTypeIds","Map","children","React","Children","c","cloneElement","mapCenter","style","ref","renderChildren","Component","defaultProps","visible","Checkbox","isChecked","toggleCheckboxChange","handleCheckboxChange","label","className","type","value","checked","onChange","weekDays","1","2","3","4","5","6","7","MapContainer","onMarkerClick","marker","e","selectedPlace","activeMarker","showingInfoWindow","onClose","restaurants","customersData","axios","get","restaurantsData","Promise","all","then","console","log","data","r","prev","catch","error","restaurant","onClick","date_available","icon","img","title","name","start_time","end_time","day","GoogleApiWrapper","apiKey","process","Search","onSelect","useStyles","makeStyles","theme","root","display","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","content","flexGrow","padding","ResponsiveDrawer","container","classes","useTheme","useState","mobileOpen","setMobileOpen","handleDrawerToggle","Divider","List","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","Toolbar","IconButton","color","aria-label","edge","Typography","variant","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","paper","ModalProps","keepMounted","xsDown","App","pins","addPin","url","Boolean","window","location","hostname","match","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.161c0d7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/local_bar-24px.fba725bd.svg\";","// HERE WE CREATE THE CURRENTLOCATION COMPONENT\n// WHICH LOADS THE MAP AND GIVES IT DEFAULT VALUES\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\n\nexport class CurrentLocation extends React.Component {\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      // Important!\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom,\n          mapTypeControlOptions: { mapTypeIds: [] }\n        }\n      );\n\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      },\n      search: \"\"\n    };\n  }\n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 43.644262,\n    lng: -79.402261\n  },\n  centerAroundCurrentLocation: false,\n  visible: true,\n  mapTypeControlOptions: { mapTypeIds: [] }\n};\n","import React, { Component, PropTypes } from 'react';\n\nclass Checkbox extends Component {\n  state = {\n    isChecked: false,\n  }\n\n  toggleCheckboxChange = () => {\n    const { handleCheckboxChange, label } = this.props;\n\n    this.setState(({ isChecked }) => (\n      {\n        isChecked: !isChecked,\n      }\n    ));\n\n    handleCheckboxChange(label);\n  }\n\n  render() {\n    const { label } = this.props;\n    const { isChecked } = this.state;\n\n    return (\n      <div className=\"checkbox\">\n        <label>\n          <input\n            type=\"checkbox\"\n            value={label}\n            checked={isChecked}\n            onChange={this.toggleCheckboxChange}\n          />\n\n          {label}\n        </label>\n      </div>\n    );\n  }\n}\n\nCheckbox.propTypes = {\n  label: PropTypes.string.isRequired,\n  handleCheckboxChange: PropTypes.func.isRequired,\n};\n\nexport default Checkbox;","// HERE WE CREATE MAPCONTAINER\n// WE USE CURRENTLOCATION AND INFOWINDOW\nimport React, { Component, useEffect } from \"react\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport CurrentLocation from \"./Map\";\nimport axios from \"axios\";\nimport img from \"./Photos/local_bar-24px.svg\";\nimport Checkbox from \"./Checkbox\";\n\nconst weekDays = {\n  1: \"Monday\",\n  2: \"Tuesday\",\n  3: \"Wednesday\",\n  4: \"Thursday\",\n  5: \"Friday\",\n  6: \"Saturday\",\n  7: \"Sunday\"\n};\n\n\n\nexport class MapContainer extends Component {\n  // [...] RETRIEVES DATA FROM THE API DATABASE\n  // on componentLoad load data into state\n  // use componentDidMount\n  // when component is loaded up onto the browser, it will grab the data then\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingInfoWindow: false, //Hides or shows the infoWindow\n      activeMarker: {}, //Shows the active marker upon click\n      selectedPlace: {}, //Shows the infoWindow to the selected place upon a marker\n      restaurants: []\n    };\n  }\n  // Need to put an api call to restaurants to show all markers on screen initially, but importing from marker file\n\n  componentDidMount() {\n    const customersData = axios.get(\"http://localhost:8080/api/customers\");\n    const restaurantsData = axios.get(\"http://localhost:8080/api/restaurants\");\n    // trackPromise(\n    Promise.all([customersData, restaurantsData])\n      .then(all => {\n        console.log(all[1].data.restaurants);\n        let r = [...all[1].data.restaurants];\n        console.log(\"r \", r);\n        this.setState(prev => {\n          // customers: all[0].data,\n          // restaurants: [...all[1].data.restaurants]\n          console.log(\"prev\", prev);\n          return {\n            ...prev,\n            restaurants: r\n          };\n        });\n      })\n      .catch(error => {\n        console.log(\n          \"An error occurred while retrieving data from the database\",\n          error\n        );\n      });\n  }\n\n  onMarkerClick = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  }\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    console.log(this.state.restaurants);\n    return (\n        <CurrentLocation centerAroundCurrentLocation google={this.props.google}>\n          {this.state.restaurants.map(restaurant => (\n            <Marker\n              onClick={this.onMarkerClick}\n              date_available={restaurant.date_available}\n              icon={img}\n              title={restaurant.name}\n              name={restaurant.name}\n              start_time={restaurant.start_time}\n              end_time={restaurant.end_time}\n              position={{ lat: restaurant.lat, lng: restaurant.lng }}\n            />\n          ))}\n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n          >\n            <Checkbox />\n            <Checkbox />\n            <div>\n              <h4>{this.state.selectedPlace.name}</h4>\n              <h5>\n                {this.state.selectedPlace.start_time} -{\" \"}\n                {this.state.selectedPlace.end_time}\n              </h5>\n              <ul>\n                {this.state.selectedPlace.date_available &&\n                  this.state.selectedPlace.date_available.map(day => (\n                    <li>{weekDays[day]}</li>\n                  ))}\n              </ul>\n            </div>\n          </InfoWindow>\n        </CurrentLocation>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n})(MapContainer);\n","// // Imports\nimport React from \"react\";\nimport GooglePlacesAutocomplete from \"react-google-places-autocomplete\";\nimport \"react-google-places-autocomplete/dist/assets/index.css\";\n\nexport default function Search() {\n  return (\n    <div>\n      <GooglePlacesAutocomplete onSelect={console.log} />\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport PersonIcon from '@material-ui/icons/Person';\nimport InfoIcon from '@material-ui/icons/Info';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction ResponsiveDrawer(props) {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {['Profile', 'Favourite places'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index % 2 === 0 ? <PersonIcon /> : <FavoriteIcon />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {['About'].map((text, index) => (\n          <ListItem button key={text}>\n            {/* NavItem Icons! */}\n            <ListItemIcon>{index % 2 === 0 ? <InfoIcon /> : <InfoIcon /> }</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Happy Brauer\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      </div>\n  );\n}\n\nResponsiveDrawer.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  container: PropTypes.any,\n};\n\nexport default ResponsiveDrawer;","import React, { useState } from \"react\";\nimport MapContainer from \"./components/MapContainer\";\nimport Search from \"./components/SearchBar\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\nimport ResponsiveDrawer from \"./components/NavBar\";\n\nfunction App() {\n  const [pins, addPin] = useState([]);\n  return (\n   \n    <MuiThemeProvider>\n      <ResponsiveDrawer />\n      <script\n        url={`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_API_KEYTWO}&libraries=places`}\n      ></script>\n      <Search addPin={addPin} />\n      <MapContainer pins={pins} />\n    </MuiThemeProvider>\n  );\n}\n\n// Search will give back a lng/lat,\n// we can pass this into pins through the state\n// and use this in MapContainer\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import { usePromiseTracker } from \"react-promise-tracker\";\n\n// const LoadingIndicator = props => {\n//   const { promiseInProgress } = usePromiseTracker();\n\n//   return (\n//     promiseInProgress &&\n//     console.log(\"hello, in progress\")\n//   )\n// }\n\nReactDOM.render( <App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}